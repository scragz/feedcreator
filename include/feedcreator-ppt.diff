Index: include/feedcreator.class.php
===================================================================
--- include/feedcreator.class.php	(revision 4)
+++ include/feedcreator.class.php	(working copy)
@@ -1,7 +1,7 @@
 <?php
 /***************************************************************************
 
-FeedCreator class v1.7.2-ppt
+FeedCreator class v1.8.0-dev (development)
 originally (c) Kai Blankenhorn
 www.bitfolge.de
 kaib@bitfolge.de
@@ -28,12 +28,18 @@
 
 
 Changelog:
+v1.8.0-ppt 18-12-06
+	fixed RFC822 conversion GMT bug
+	modifies _setMIME() function for DynamicMime
+	change rss default encoding to utf-8
+	TIME_ZONE defaulted to GMT
 
-v1.7.2-ppt	11-21-05 
+
+v1.7.2-ppt	11-21-05
 	added Atom 1.0 support
 	added enclosure support for RSS 2.0/ATOM 1.0
-	added docs for v1.7.2-ppt only! 
-	
+	added docs for v1.7.2-ppt only!
+
 v1.7.2-mod	03-12-05
 	added output function outputFeed for on-the-fly feed generation
 
@@ -88,7 +94,7 @@
 	renamed to FeedCreator, as it not only creates RSS anymore
 	added support for mbox
 	tentative support for echo/necho/atom/pie/???
-        
+
 v1.2    07-20-03
 	intelligent auto-truncating of RSS 0.91 attributes
 	don't create some attributes when they're not set
@@ -110,60 +116,60 @@
 
 /*** GENERAL USAGE *********************************************************
 
-include("feedcreator.class.php"); 
+include("feedcreator.class.php");
 
-$rss = new UniversalFeedCreator(); 
+$rss = new UniversalFeedCreator();
 $rss->useCached(); // use cached version if age<1 hour
-$rss->title = "PHP news"; 
-$rss->description = "daily news from the PHP scripting world"; 
+$rss->title = "PHP news";
+$rss->description = "daily news from the PHP scripting world";
 
 //optional
 $rss->descriptionTruncSize = 500;
 $rss->descriptionHtmlSyndicated = true;
 
-$rss->link = "http://www.dailyphp.net/news"; 
-$rss->syndicationURL = "http://www.dailyphp.net/".$_SERVER["PHP_SELF"]; 
+$rss->link = "http://www.dailyphp.net/news";
+$rss->syndicationURL = "http://www.dailyphp.net/".$_SERVER["PHP_SELF"];
 
-$image = new FeedImage(); 
-$image->title = "dailyphp.net logo"; 
-$image->url = "http://www.dailyphp.net/images/logo.gif"; 
-$image->link = "http://www.dailyphp.net"; 
-$image->description = "Feed provided by dailyphp.net. Click to visit."; 
+$image = new FeedImage();
+$image->title = "dailyphp.net logo";
+$image->url = "http://www.dailyphp.net/images/logo.gif";
+$image->link = "http://www.dailyphp.net";
+$image->description = "Feed provided by dailyphp.net. Click to visit.";
 
 //optional
 $image->descriptionTruncSize = 500;
 $image->descriptionHtmlSyndicated = true;
 
-$rss->image = $image; 
+$rss->image = $image;
 
-// get your news items from somewhere, e.g. your database: 
-mysql_select_db($dbHost, $dbUser, $dbPass); 
-$res = mysql_query("SELECT * FROM news ORDER BY newsdate DESC"); 
-while ($data = mysql_fetch_object($res)) { 
-    $item = new FeedItem(); 
-    $item->title = $data->title; 
-    $item->link = $data->url; 
-    $item->description = $data->short; 
-    
+// get your news items from somewhere, e.g. your database:
+mysql_select_db($dbHost, $dbUser, $dbPass);
+$res = mysql_query("SELECT * FROM news ORDER BY newsdate DESC");
+while ($data = mysql_fetch_object($res)) {
+    $item = new FeedItem();
+    $item->title = $data->title;
+    $item->link = $data->url;
+    $item->description = $data->short;
+
     //optional
     item->descriptionTruncSize = 500;
     item->descriptionHtmlSyndicated = true;
-    
+
     //optional (enclosure)
     $item->enclosure = new EnclosureItem();
     $item->enclosure->url='http://http://www.dailyphp.net/media/voice.mp3';
     $item->enclosure->length="950230";
     $item->enclosure->type='audio/x-mpeg'
-    
-    
 
-    $item->date = $data->newsdate; 
-    $item->source = "http://www.dailyphp.net"; 
-    $item->author = "John Doe"; 
-     
-    $rss->addItem($item); 
-} 
 
+
+    $item->date = $data->newsdate;
+    $item->source = "http://www.dailyphp.net";
+    $item->author = "John Doe";
+
+    $rss->addItem($item);
+}
+
 // valid format strings are: RSS0.91, RSS1.0, RSS2.0, PIE0.1 (deprecated),
 // MBOX, OPML, ATOM, ATOM10, ATOM0.3, HTML, JS
 echo $rss->saveFeed("RSS1.0", "news/feed.xml");
@@ -177,7 +183,7 @@
 **************************************************************************/
 
 // your local timezone, set to "" to disable or for GMT
-define("TIME_ZONE","+01:00");
+define("TIME_ZONE","");
 
 
 
@@ -185,11 +191,11 @@
 /**
  * Version string.
  **/
- 
-define("FEEDCREATOR_VERSION", "FeedCreator 1.7.2-ppt (info@mypapit.net)");
 
+define("FEEDCREATOR_VERSION", "FeedCreator 1.8.0-dev (info@mypapit.net)");
 
 
+
 /**
  * A FeedItem is a part of a FeedCreator feed.
  *
@@ -201,12 +207,12 @@
 	 * Mandatory attributes of an item.
 	 */
 	var $title, $description, $link;
-	
+
 	/**
 	 * Optional attributes of an item.
 	 */
 	var $author, $authorEmail, $image, $category, $comments, $guid, $source, $creator;
-	
+
 	/**
 	 * Publishing date of an item. May be in one of the following formats:
 	 *
@@ -221,7 +227,7 @@
 	 *	1043082341
 	 */
 	var $date;
-	
+
 	/**
 	 * Add <enclosure> element tag RSS 2.0
 	 * modified by : Mohammad Hafiz bin Ismail (mypapit@gmail.com)
@@ -229,10 +235,10 @@
 	 *
 	 * display :
 	 * <enclosure length="17691" url="http://something.com/picture.jpg" type="image/jpeg" />
-	 * 
+	 *
 	 */
 	var $enclosure;
-	
+
 	/**
 	 * Any additional elements to include as an assiciated array. All $key => $value pairs
 	 * will be included unencoded in the feed item in the form
@@ -249,21 +255,21 @@
 
 class EnclosureItem extends HtmlDescribable {
 	/*
-	* 
+	*
 	* core variables
 	*
 	**/
 	var $url,$length,$type;
-	
+
 	/*
 	* For use with another extension like Yahoo mRSS
 	* Warning :
-	* These variables might not show up in 
+	* These variables might not show up in
 	* later release / not finalize yet!
 	*
 	*/
 	var $width, $height, $title, $description, $keywords, $thumburl;
-	
+
 	var $additionalElements = Array();
 
 }
@@ -279,7 +285,7 @@
 	 * Mandatory attributes of an image.
 	 */
 	var $title, $url, $link;
-	
+
 	/**
 	 * Optional attributes of an image.
 	 */
@@ -297,16 +303,16 @@
 	 * Indicates whether the description field should be rendered in HTML.
 	 */
 	var $descriptionHtmlSyndicated;
-	
+
 	/**
 	 * Indicates whether and to how many characters a description should be truncated.
 	 */
 	var $descriptionTruncSize;
-	
+
 	/**
 	 * Returns a formatted description field, depending on descriptionHtmlSyndicated and
 	 * $descriptionTruncSize properties
-	 * @return    string    the formatted description  
+	 * @return    string    the formatted description
 	 */
 	function getDescription() {
 		$descriptionField = new FeedHtmlField($this->description);
@@ -321,7 +327,7 @@
 
 /**
  * An FeedHtmlField describes and generates
- * a feed, item or image html field (probably a description). Output is 
+ * a feed, item or image html field (probably a description). Output is
  * generated based on $truncSize, $syndicateHtml properties.
  * @author Pascal Van Hecke <feedcreator.class.php@vanhecke.info>
  * @version 1.6
@@ -331,13 +337,13 @@
 	 * Mandatory attributes of a FeedHtmlField.
 	 */
 	var $rawFieldContent;
-	
+
 	/**
 	 * Optional attributes of a FeedHtmlField.
-	 * 
+	 *
 	 */
 	var $truncSize, $syndicateHtml;
-	
+
 	/**
 	 * Creates a new instance of FeedHtmlField.
 	 * @param  $string: if given, sets the rawFieldContent property
@@ -347,14 +353,14 @@
 			$this->rawFieldContent = $parFieldContent;
 		}
 	}
-		
-		
+
+
 	/**
 	 * Creates the right output, depending on $truncSize, $syndicateHtml properties.
 	 * @return string    the formatted field
 	 */
 	function output() {
-		// when field available and syndicated in html we assume 
+		// when field available and syndicated in html we assume
 		// - valid html in $rawFieldContent and we enclose in CDATA tags
 		// - no truncation (truncating risks producing invalid html)
 		if (!$this->rawFieldContent) {
@@ -386,123 +392,75 @@
  */
 class UniversalFeedCreator extends FeedCreator {
 	var $_feed;
-	
-	function _setMIME($format) {
-		switch (strtoupper($format)) {
-			
-			case "2.0":
-				// fall through
-			case "RSS2.0":
-				header('Content-type: text/xml', true);
-				break;
-			
-			case "1.0":
-				// fall through
-			case "RSS1.0":
-				header('Content-type: text/xml', true);
-				break;
-			
-			case "PIE0.1":
-				header('Content-type: text/xml', true);
-				break;
-			
-			case "MBOX":
-				header('Content-type: text/plain', true);
-				break;
-			
-			case "OPML":
-				header('Content-type: text/xml', true);
-				break;
-				
-			case "ATOM":
-				// fall through: always the latest ATOM version
-			case "ATOM1.0":
-				header('Content-type: application/xml', true);
-				break;
-				
-			case "ATOM0.3":
-				header('Content-type: application/xml', true);
-				break;
-	
-				
-			case "HTML":
-				header('Content-type: text/html', true);
-				break;
-			
-			case "JS":
-				// fall through
-			case "JAVASCRIPT":
-				header('Content-type: text/javascript', true);
-				break;
 
-			default:
-			case "0.91":
-				// fall through
-			case "RSS0.91":
-				header('Content-type: text/xml', true);
-				break;
-		}
+	function _setMIME() {
+		//switch (strtoupper($format)) {
+
+
+		header('Content-type: ' . $this->contentType .'; charset=' . $this->encoding, true);
+
+
 	}
-	
+
 	function _setFormat($format) {
 		switch (strtoupper($format)) {
-			
+
 			case "2.0":
 				// fall through
 			case "RSS2.0":
 				$this->_feed = new RSSCreator20();
 				break;
-			
+
 			case "1.0":
 				// fall through
 			case "RSS1.0":
 				$this->_feed = new RSSCreator10();
 				break;
-			
+
 			case "0.91":
 				// fall through
 			case "RSS0.91":
 				$this->_feed = new RSSCreator091();
 				break;
-			
+
 			case "PIE0.1":
 				$this->_feed = new PIECreator01();
 				break;
-			
+
 			case "MBOX":
 				$this->_feed = new MBOXCreator();
 				break;
-			
+
 			case "OPML":
 				$this->_feed = new OPMLCreator();
 				break;
-				
+
 			case "ATOM":
 				// fall through: always the latest ATOM version
 			case "ATOM1.0":
 				$this->_feed = new AtomCreator10();
 				break;
-			
-				
+
+
 			case "ATOM0.3":
 				$this->_feed = new AtomCreator03();
 				break;
-							
+
 			case "HTML":
 				$this->_feed = new HTMLCreator();
 				break;
-			
+
 			case "JS":
 				// fall through
 			case "JAVASCRIPT":
 				$this->_feed = new JSCreator();
 				break;
-			
+
 			default:
 				$this->_feed = new RSSCreator091();
 				break;
 		}
-        
+
 		$vars = get_object_vars($this);
 		foreach ($vars as $key => $value) {
 			// prevent overwriting of properties "contentType", "encoding"; do not copy "_feed" itself
@@ -511,7 +469,7 @@
 			}
 		}
 	}
-	
+
 	/**
 	 * Creates a syndication feed based on the items previously added.
 	 *
@@ -524,14 +482,14 @@
 		$this->_setFormat($format);
 		return $this->_feed->createFeed();
 	}
-	
-	
-	
+
+
+
 	/**
 	 * Saves this feed as a file on the local disk. After the file is saved, an HTTP redirect
 	 * header may be sent to redirect the use to the newly created file.
 	 * @since 1.4
-	 * 
+	 *
 	 * @param	string	format	format the feed should comply to. Valid values are:
 	 *			"PIE0.1" (deprecated), "mbox", "RSS0.91", "RSS1.0", "RSS2.0", "OPML", "ATOM", "ATOM0.3", "HTML", "JS"
 	 * @param	string	filename	optional	the filename where a recent version of the feed is saved. If not specified, the filename is $_SERVER["PHP_SELF"] with the extension changed to .xml (see _generateFilename()).
@@ -560,7 +518,7 @@
       $this->_feed->useCached($filename, $timeout);
    }
 
-   
+
    /**
 	* Outputs feed to the browser - needed for on-the-fly feed generation (like it is done in WordPress, etc.)
 	*
@@ -572,8 +530,8 @@
 		$this->_setMIME($format);
 		$this->_feed->outputFeed();
    }
-   
-   
+
+
 }
 
 
@@ -591,8 +549,8 @@
 	 * Mandatory attributes of a feed.
 	 */
 	var $title, $description, $link;
-	
-	
+
+
 	/**
 	 * Optional attributes of a feed.
 	 */
@@ -603,29 +561,30 @@
 	* Ignored in the output when empty.
 	*/
 	var $xslStyleSheet = "";
-	
-	
+
+
 	/**
 	 * @access private
 	 */
 	var $items = Array();
- 	
-	
+
+
 	/**
 	 * This feed's MIME content type.
 	 * @since 1.4
 	 * @access private
 	 */
 	var $contentType = "application/xml";
-	
-	
+
+
 	/**
 	 * This feed's character encoding.
 	 * @since 1.6.1
 	 **/
-	var $encoding = "ISO-8859-1";
-	
-	
+	//var $encoding = "ISO-8859-1"; //original :p
+	var $encoding = "utf-8";
+
+
 	/**
 	 * Any additional elements to include as an assiciated array. All $key => $value pairs
 	 * will be included unencoded in the feed in the form
@@ -635,8 +594,8 @@
 	 * the FeedCreator class used.
 	 */
 	var $additionalElements = Array();
-   
-    
+
+
 	/**
 	 * Adds an FeedItem to the feed.
 	 *
@@ -646,15 +605,15 @@
 	function addItem($item) {
 		$this->items[] = $item;
 	}
-	
-	
+
+
 	/**
 	 * Truncates a string to a certain length at the most sensible point.
 	 * First, if there's a '.' character near the end of the string, the string is truncated after this character.
 	 * If there is no '.', the string is truncated after the last ' ' character.
 	 * If the string is truncated, " ..." is appended.
 	 * If the string is already shorter than $length, it is returned unchanged.
-	 * 
+	 *
 	 * @static
 	 * @param string    string A string to be truncated.
 	 * @param int        length the maximum length the string should be truncated to
@@ -664,7 +623,7 @@
 		if (strlen($string)<=$length) {
 			return $string;
 		}
-		
+
 		$pos = strrpos($string,".");
 		if ($pos>=$length-4) {
 			$string = substr($string,0,$length-4);
@@ -673,7 +632,7 @@
 		if ($pos>=$length*0.4) {
 			return substr($string,0,$pos+1)." ...";
 		}
-		
+
 		$pos = strrpos($string," ");
 		if ($pos>=$length-4) {
 			$string = substr($string,0,$length-4);
@@ -682,12 +641,12 @@
 		if ($pos>=$length*0.4) {
 			return substr($string,0,$pos)." ...";
 		}
-		
+
 		return substr($string,0,$length-4)." ...";
-			
+
 	}
-	
-	
+
+
 	/**
 	 * Creates a comment indicating the generator of this feed.
 	 * The format of this comment seems to be recognized by
@@ -696,8 +655,8 @@
 	function _createGeneratorComment() {
 		return "<!-- generator=\"".FEEDCREATOR_VERSION."\" -->\n";
 	}
-	
-	
+
+
 	/**
 	 * Creates a string containing all additional elements specified in
 	 * $additionalElements.
@@ -714,32 +673,32 @@
 		}
 		return $ae;
 	}
-	
+
 	function _createStylesheetReferences() {
 		$xml = "";
 		if ($this->cssStyleSheet) $xml .= "<?xml-stylesheet href=\"".$this->cssStyleSheet."\" type=\"text/css\"?>\n";
 		if ($this->xslStyleSheet) $xml .= "<?xml-stylesheet href=\"".$this->xslStyleSheet."\" type=\"text/xsl\"?>\n";
 		return $xml;
 	}
-	
-	
+
+
 	/**
 	 * Builds the feed's text.
 	 * @abstract
-	 * @return    string    the feed's complete text 
+	 * @return    string    the feed's complete text
 	 */
 	function createFeed() {
 	}
-	
+
 	/**
 	 * Generate a filename for the feed cache file. The result will be $_SERVER["PHP_SELF"] with the extension changed to .xml.
 	 * For example:
-	 * 
+	 *
 	 * echo $_SERVER["PHP_SELF"]."\n";
 	 * echo FeedCreator::_generateFilename();
-	 * 
+	 *
 	 * would produce:
-	 * 
+	 *
 	 * /rss/latestnews.php
 	 * latestnews.xml
 	 *
@@ -751,23 +710,23 @@
 		$fileInfo = pathinfo($_SERVER["PHP_SELF"]);
 		return substr($fileInfo["basename"],0,-(strlen($fileInfo["extension"])+1)).".xml";
 	}
-	
-	
+
+
 	/**
 	 * @since 1.4
 	 * @access private
 	 */
 	function _redirect($filename) {
 		// attention, heavily-commented-out-area
-		
+
 		// maybe use this in addition to file time checking
 		//Header("Expires: ".date("r",time()+$this->_timeout));
-		
+
 		/* no caching at all, doesn't seem to work as good:
 		Header("Cache-Control: no-cache");
 		Header("Pragma: no-cache");
 		*/
-		
+
 		// HTTP redirect, some feed readers' simple HTTP implementations don't follow it
 		//Header("Location: ".$filename);
 
@@ -776,7 +735,7 @@
 		readfile($filename, "r");
 		die();
 	}
-    
+
 	/**
 	 * Turns on caching and checks if there is a recent version of this feed in the cache.
 	 * If there is, an HTTP redirect header is sent.
@@ -796,13 +755,13 @@
 			$this->_redirect($filename);
 		}
 	}
-	
-	
+
+
 	/**
 	 * Saves this feed as a file on the local disk. After the file is saved, a redirect
 	 * header may be sent to redirect the user to the newly created file.
 	 * @since 1.4
-	 * 
+	 *
 	 * @param filename	string	optional	the filename where a recent version of the feed is saved. If not specified, the filename is $_SERVER["PHP_SELF"] with the extension changed to .xml (see _generateFilename()).
 	 * @param redirect	boolean	optional	send an HTTP redirect header or not. If true, the user will be automatically redirected to the created file.
 	 */
@@ -832,7 +791,12 @@
 		echo $this->createFeed();
 	}
 
-	
+	function setEncoding($encoding="utf-8") {
+		$this->encoding = "utf-8";
+
+	}
+
+
 }
 
 
@@ -842,7 +806,7 @@
  */
 class FeedDate {
 	var $unix;
-	
+
 	/**
 	 * Creates a new instance of FeedDate representing a given date.
 	 * Accepts RFC 822, ISO 8601 date formats as well as unix time stamps.
@@ -850,7 +814,7 @@
 	 */
 	function FeedDate($dateString="") {
 		if ($dateString=="") $dateString = date("r");
-		
+
 		if (is_numeric($dateString)) {
 			$this->unix = $dateString;
 			return;
@@ -902,11 +866,16 @@
 	 */
 	function rfc822() {
 		//return gmdate("r",$this->unix);
-		$date = gmdate("D, d M Y H:i:s", $this->unix);
-		if (TIME_ZONE!="") $date .= " ".str_replace(":","",TIME_ZONE);
+		$date = gmdate("D, d M Y H:i:s", time());
+
+		if (TIME_ZONE!="") {
+			$date .= " ".str_replace(":","",TIME_ZONE);
+		} else {
+			$date .= " ".str_replace(":","","GMT");
+		}
 		return $date;
 	}
-	
+
 	/**
 	 * Gets the date stored in this FeedDate as an ISO 8601 date.
 	 *
@@ -918,8 +887,8 @@
 		if (TIME_ZONE!="") $date = str_replace("+00:00",TIME_ZONE,$date);
 		return $date;
 	}
-	
-		
+
+
 	/**
 	 * Gets the date stored in this FeedDate as unix time stamp.
 	 *
@@ -943,9 +912,9 @@
 	/**
 	 * Builds the RSS feed's text. The feed will be compliant to RDF Site Summary (RSS) 1.0.
 	 * The feed will contain all items previously added in the same order.
-	 * @return    string    the feed's complete text 
+	 * @return    string    the feed's complete text
 	 */
-	function createFeed() {     
+	function createFeed() {
 		$feed = "<?xml version=\"1.0\" encoding=\"".$this->encoding."\"?>\n";
 		$feed.= $this->_createGeneratorComment();
 		if ($this->cssStyleSheet=="") {
@@ -954,7 +923,7 @@
 		$feed.= $this->_createStylesheetReferences();
 		$feed.= "<rdf:RDF\n";
 		$feed.= "    xmlns=\"http://purl.org/rss/1.0/\"\n";
-		$feed.= "    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n"; 
+		$feed.= "    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n";
 		$feed.= "    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n";
 		$feed.= "    xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n";
 		$feed.= "    <channel rdf:about=\"".$this->syndicationURL."\">\n";
@@ -982,7 +951,7 @@
 			$feed.= "    </image>\n";
 		}
 		$feed.= $this->_createAdditionalElements($this->additionalElements, "    ");
-		
+
 		for ($i=0;$i<count($this->items);$i++) {
 			$feed.= "    <item rdf:about=\"".htmlspecialchars($this->items[$i]->link)."\">\n";
 			//$feed.= "        <dc:type>Posting</dc:type>\n";
@@ -1029,7 +998,7 @@
 		$this->_setRSSVersion("0.91");
 		$this->contentType = "application/rss+xml";
 	}
-	
+
 	/**
 	 * Sets this RSS feed's version number.
 	 * @access private
@@ -1041,13 +1010,13 @@
 	/**
 	 * Builds the RSS feed's text. The feed will be compliant to RDF Site Summary (RSS) 1.0.
 	 * The feed will contain all items previously added in the same order.
-	 * @return    string    the feed's complete text 
+	 * @return    string    the feed's complete text
 	 */
 	function createFeed() {
 		$feed = "<?xml version=\"1.0\" encoding=\"".$this->encoding."\"?>\n";
 		$feed.= $this->_createGeneratorComment();
 		$feed.= $this->_createStylesheetReferences();
-		$feed.= "<rss version=\"".$this->RSSVersion."\">\n"; 
+		$feed.= "<rss version=\"".$this->RSSVersion."\">\n";
 		$feed.= "    <channel>\n";
 		$feed.= "        <title>".FeedCreator::iTrunc(htmlspecialchars($this->title),100)."</title>\n";
 		$this->descriptionTruncSize = 500;
@@ -1059,8 +1028,8 @@
 
 		if ($this->image!=null) {
 			$feed.= "        <image>\n";
-			$feed.= "            <url>".$this->image->url."</url>\n"; 
-			$feed.= "            <title>".FeedCreator::iTrunc(htmlspecialchars($this->image->title),100)."</title>\n"; 
+			$feed.= "            <url>".$this->image->url."</url>\n";
+			$feed.= "            <title>".FeedCreator::iTrunc(htmlspecialchars($this->image->title),100)."</title>\n";
 			$feed.= "            <link>".$this->image->link."</link>\n";
 			if ($this->image->width!="") {
 				$feed.= "            <width>".$this->image->width."</width>\n";
@@ -1114,7 +1083,7 @@
 			$feed.= "            <title>".FeedCreator::iTrunc(htmlspecialchars(strip_tags($this->items[$i]->title)),100)."</title>\n";
 			$feed.= "            <link>".htmlspecialchars($this->items[$i]->link)."</link>\n";
 			$feed.= "            <description>".$this->items[$i]->getDescription()."</description>\n";
-			
+
 			if ($this->items[$i]->author!="") {
 				$feed.= "            <author>".htmlspecialchars($this->items[$i]->author)."</author>\n";
 			}
@@ -1138,7 +1107,7 @@
 				$feed.= "            <guid>".htmlspecialchars($this->items[$i]->guid)."</guid>\n";
 			}
 			$feed.= $this->_createAdditionalElements($this->items[$i]->additionalElements, "        ");
-			
+
 			if ($this->RSSVersion == "2.0" && $this->items[$i]->enclosure != NULL)
 				{
 				                $feed.= "            <enclosure url=\"";
@@ -1149,12 +1118,12 @@
 				                $feed.= $this->items[$i]->enclosure->type;
 				                $feed.= "\"/>\n";
 		            	}
-            	
-		
-		
+
+
+
 			$feed.= "        </item>\n";
 		}
-		
+
 		$feed.= "    </channel>\n";
 		$feed.= "</rss>\n";
 		return $feed;
@@ -1175,7 +1144,7 @@
     function RSSCreator20() {
         parent::_setRSSVersion("2.0");
     }
-    
+
 }
 
 
@@ -1188,15 +1157,15 @@
  * @author Scott Reynen <scott@randomchaos.com> and Kai Blankenhorn <kaib@bitfolge.de>
  */
 class PIECreator01 extends FeedCreator {
-	
+
 	function PIECreator01() {
 		$this->encoding = "utf-8";
 	}
-    
+
 	function createFeed() {
 		$feed = "<?xml version=\"1.0\" encoding=\"".$this->encoding."\"?>\n";
 		$feed.= $this->_createStylesheetReferences();
-		$feed.= "<feed version=\"0.1\" xmlns=\"http://example.com/newformat#\">\n"; 
+		$feed.= "<feed version=\"0.1\" xmlns=\"http://example.com/newformat#\">\n";
 		$feed.= "    <title>".FeedCreator::iTrunc(htmlspecialchars($this->title),100)."</title>\n";
 		$this->truncSize = 500;
 		$feed.= "    <subtitle>".$this->getDescription()."</subtitle>\n";
@@ -1236,7 +1205,7 @@
  * for the feed or an author for every single feed item.
  *
  * Some elements have not been implemented yet. These are (incomplete list):
- * author URL, item author's email and URL, item contents, alternate links, 
+ * author URL, item author's email and URL, item contents, alternate links,
  * other link content types than text/html. Some of them may be created with
  * AtomCreator10::additionalElements.
  *
@@ -1245,7 +1214,7 @@
  * @author Mohammad Hafiz Ismail (mypapit@gmail.com)
  */
  class AtomCreator10 extends FeedCreator {
- 
+
 	function AtomCreator10() {
 		$this->contentType = "application/atom+xml";
 		$this->encoding = "utf-8";
@@ -1259,7 +1228,7 @@
 		if ($this->language!="") {
 			$feed.= " xml:lang=\"".$this->language."\"";
 		}
-		$feed.= ">\n"; 
+		$feed.= ">\n";
 		$feed.= "    <title>".htmlspecialchars($this->title)."</title>\n";
 		$feed.= "    <subtitle>".htmlspecialchars($this->description)."</subtitle>\n";
 		$feed.= "    <link rel=\"alternate\" type=\"text/html\" href=\"".htmlspecialchars($this->link)."\"/>\n";
@@ -1306,10 +1275,10 @@
 		return $feed;
 	}
 
-	
+
 }
- 
- 
+
+
 /**
  * AtomCreator03 is a FeedCreator that implements the atom specification,
  * as in http://www.intertwingly.net/wiki/pie/FrontPage.
@@ -1318,7 +1287,7 @@
  * for the feed or an author for every single feed item.
  *
  * Some elements have not been implemented yet. These are (incomplete list):
- * author URL, item author's email and URL, item contents, alternate links, 
+ * author URL, item author's email and URL, item contents, alternate links,
  * other link content types than text/html. Some of them may be created with
  * AtomCreator03::additionalElements.
  *
@@ -1332,7 +1301,7 @@
 		$this->contentType = "application/atom+xml";
 		$this->encoding = "utf-8";
 	}
-	
+
 	function createFeed() {
 		$feed = "<?xml version=\"1.0\" encoding=\"".$this->encoding."\"?>\n";
 		$feed.= $this->_createGeneratorComment();
@@ -1341,7 +1310,7 @@
 		if ($this->language!="") {
 			$feed.= " xml:lang=\"".$this->language."\"";
 		}
-		$feed.= ">\n"; 
+		$feed.= ">\n";
 		$feed.= "    <title>".htmlspecialchars($this->title)."</title>\n";
 		$feed.= "    <tagline>".htmlspecialchars($this->description)."</tagline>\n";
 		$feed.= "    <link rel=\"alternate\" type=\"text/html\" href=\"".htmlspecialchars($this->link)."\"/>\n";
@@ -1400,41 +1369,41 @@
 		$this->contentType = "text/plain";
 		$this->encoding = "ISO-8859-15";
 	}
-    
-	function qp_enc($input = "", $line_max = 76) { 
-		$hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'); 
-		$lines = preg_split("/(?:\r\n|\r|\n)/", $input); 
-		$eol = "\r\n"; 
-		$escape = "="; 
-		$output = ""; 
-		while( list(, $line) = each($lines) ) { 
-			//$line = rtrim($line); // remove trailing white space -> no =20\r\n necessary 
-			$linlen = strlen($line); 
-			$newline = ""; 
-			for($i = 0; $i < $linlen; $i++) { 
-				$c = substr($line, $i, 1); 
-				$dec = ord($c); 
-				if ( ($dec == 32) && ($i == ($linlen - 1)) ) { // convert space at eol only 
-					$c = "=20"; 
-				} elseif ( ($dec == 61) || ($dec < 32 ) || ($dec > 126) ) { // always encode "\t", which is *not* required 
-					$h2 = floor($dec/16); $h1 = floor($dec%16); 
-					$c = $escape.$hex["$h2"].$hex["$h1"]; 
-				} 
-				if ( (strlen($newline) + strlen($c)) >= $line_max ) { // CRLF is not counted 
-					$output .= $newline.$escape.$eol; // soft line break; " =\r\n" is okay 
-					$newline = ""; 
-				} 
-				$newline .= $c; 
-			} // end of for 
-			$output .= $newline.$eol; 
-		} 
-		return trim($output); 
+
+	function qp_enc($input = "", $line_max = 76) {
+		$hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
+		$lines = preg_split("/(?:\r\n|\r|\n)/", $input);
+		$eol = "\r\n";
+		$escape = "=";
+		$output = "";
+		while( list(, $line) = each($lines) ) {
+			//$line = rtrim($line); // remove trailing white space -> no =20\r\n necessary
+			$linlen = strlen($line);
+			$newline = "";
+			for($i = 0; $i < $linlen; $i++) {
+				$c = substr($line, $i, 1);
+				$dec = ord($c);
+				if ( ($dec == 32) && ($i == ($linlen - 1)) ) { // convert space at eol only
+					$c = "=20";
+				} elseif ( ($dec == 61) || ($dec < 32 ) || ($dec > 126) ) { // always encode "\t", which is *not* required
+					$h2 = floor($dec/16); $h1 = floor($dec%16);
+					$c = $escape.$hex["$h2"].$hex["$h1"];
+				}
+				if ( (strlen($newline) + strlen($c)) >= $line_max ) { // CRLF is not counted
+					$output .= $newline.$escape.$eol; // soft line break; " =\r\n" is okay
+					$newline = "";
+				}
+				$newline .= $c;
+			} // end of for
+			$output .= $newline.$eol;
+		}
+		return trim($output);
 	}
-	
 
+
 	/**
 	 * Builds the MBOX contents.
-	 * @return    string    the feed's complete text 
+	 * @return    string    the feed's complete text
 	 */
 	function createFeed() {
 		for ($i=0;$i<count($this->items);$i++) {
@@ -1460,7 +1429,7 @@
 		}
 		return $feed;
 	}
-	
+
 	/**
 	 * Generate a filename for the feed cache file. Overridden from FeedCreator to prevent XML data types.
 	 * @return string the feed cache filename
@@ -1476,7 +1445,7 @@
 
 /**
  * OPMLCreator is a FeedCreator that implements OPML 1.0.
- * 
+ *
  * @see http://opml.scripting.com/spec
  * @author Dirk Clemens, Kai Blankenhorn
  * @since 1.5
@@ -1486,8 +1455,8 @@
 	function OPMLCreator() {
 		$this->encoding = "utf-8";
 	}
-    
-	function createFeed() {     
+
+	function createFeed() {
 		$feed = "<?xml version=\"1.0\" encoding=\"".$this->encoding."\"?>\n";
 		$feed.= $this->_createGeneratorComment();
 		$feed.= $this->_createStylesheetReferences();
@@ -1528,12 +1497,12 @@
 
 
 /**
- * HTMLCreator is a FeedCreator that writes an HTML feed file to a specific 
+ * HTMLCreator is a FeedCreator that writes an HTML feed file to a specific
  * location, overriding the createFeed method of the parent FeedCreator.
  * The HTML produced can be included over http by scripting languages, or serve
  * as the source for an IFrame.
  * All output by this class is embedded in <div></div> tags to enable formatting
- * using CSS. 
+ * using CSS.
  *
  * @author Pascal Van Hecke
  * @since 1.7
@@ -1541,39 +1510,39 @@
 class HTMLCreator extends FeedCreator {
 
 	var $contentType = "text/html";
-	
+
 	/**
 	 * Contains HTML to be output at the start of the feed's html representation.
 	 */
 	var $header;
-	
+
 	/**
 	 * Contains HTML to be output at the end of the feed's html representation.
 	 */
 	var $footer ;
-	
+
 	/**
-	 * Contains HTML to be output between entries. A separator is only used in 
+	 * Contains HTML to be output between entries. A separator is only used in
 	 * case of multiple entries.
 	 */
 	var $separator;
-	
+
 	/**
-	 * Used to prefix the stylenames to make sure they are unique 
+	 * Used to prefix the stylenames to make sure they are unique
 	 * and do not clash with stylenames on the users' page.
 	 */
 	var $stylePrefix;
-	
+
 	/**
 	 * Determines whether the links open in a new window or not.
 	 */
 	var $openInNewWindow = true;
-	
+
 	var $imageAlign ="right";
-	
+
 	/**
 	 * In case of very simple output you may want to get rid of the style tags,
-	 * hence this variable.  There's no equivalent on item level, but of course you can 
+	 * hence this variable.  There's no equivalent on item level, but of course you can
 	 * add strings to it while iterating over the items ($this->stylelessOutput .= ...)
 	 * and when it is non-empty, ONLY the styleless output is printed, the rest is ignored
 	 * in the function createFeed().
@@ -1582,14 +1551,14 @@
 
 	/**
 	 * Writes the HTML.
-	 * @return    string    the scripts's complete text 
+	 * @return    string    the scripts's complete text
 	 */
 	function createFeed() {
 		// if there is styleless output, use the content of this variable and ignore the rest
 		if ($this->stylelessOutput!="") {
 			return $this->stylelessOutput;
 		}
-		
+
 		//if no stylePrefix is set, generate it yourself depending on the script name
 		if ($this->stylePrefix=="") {
 			$this->stylePrefix = str_replace(".", "_", $this->_generateFilename())."_";
@@ -1599,7 +1568,7 @@
 		if ($this->openInNewWindow) {
 			$targetInsert = " target='_blank'";
 		}
-		
+
 		// use this array to put the lines in and implode later with "document.write" javascript
 		$feedArray = array();
 		if ($this->image!=null) {
@@ -1616,7 +1585,7 @@
 			$imageStr .="/></a>";
 			$feedArray[] = $imageStr;
 		}
-		
+
 		if ($this->title) {
 			$feedArray[] = "<div class='".$this->stylePrefix."title'><a href='".$this->link."' ".$targetInsert." class='".$this->stylePrefix."title'>".
 				FeedCreator::iTrunc(htmlspecialchars($this->title),100)."</a></div>";
@@ -1626,31 +1595,31 @@
 				str_replace("]]>", "", str_replace("<![CDATA[", "", $this->getDescription())).
 				"</div>";
 		}
-		
+
 		if ($this->header) {
 			$feedArray[] = "<div class='".$this->stylePrefix."header'>".$this->header."</div>";
 		}
-		
+
 		for ($i=0;$i<count($this->items);$i++) {
 			if ($this->separator and $i > 0) {
 				$feedArray[] = "<div class='".$this->stylePrefix."separator'>".$this->separator."</div>";
 			}
-			
+
 			if ($this->items[$i]->title) {
 				if ($this->items[$i]->link) {
-					$feedArray[] = 
+					$feedArray[] =
 						"<div class='".$this->stylePrefix."item_title'><a href='".$this->items[$i]->link."' class='".$this->stylePrefix.
 						"item_title'".$targetInsert.">".FeedCreator::iTrunc(htmlspecialchars(strip_tags($this->items[$i]->title)),100).
 						"</a></div>";
 				} else {
-					$feedArray[] = 
+					$feedArray[] =
 						"<div class='".$this->stylePrefix."item_title'>".
 						FeedCreator::iTrunc(htmlspecialchars(strip_tags($this->items[$i]->title)),100).
 						"</div>";
 				}
 			}
 			if ($this->items[$i]->getDescription()) {
-				$feedArray[] = 
+				$feedArray[] =
 				"<div class='".$this->stylePrefix."item_description'>".
 					str_replace("]]>", "", str_replace("<![CDATA[", "", $this->items[$i]->getDescription())).
 					"</div>";
@@ -1659,11 +1628,11 @@
 		if ($this->footer) {
 			$feedArray[] = "<div class='".$this->stylePrefix."footer'>".$this->footer."</div>";
 		}
-		
+
 		$feed= "".join($feedArray, "\r\n");
 		return $feed;
 	}
-    
+
 	/**
 	 * Overrrides parent to produce .html extensions
 	 *
@@ -1675,34 +1644,34 @@
 		$fileInfo = pathinfo($_SERVER["PHP_SELF"]);
 		return substr($fileInfo["basename"],0,-(strlen($fileInfo["extension"])+1)).".html";
 	}
-}	
+}
 
 
 /**
- * JSCreator is a class that writes a js file to a specific 
+ * JSCreator is a class that writes a js file to a specific
  * location, overriding the createFeed method of the parent HTMLCreator.
  *
  * @author Pascal Van Hecke
  */
 class JSCreator extends HTMLCreator {
 	var $contentType = "text/javascript";
-	
+
 	/**
 	 * writes the javascript
-	 * @return    string    the scripts's complete text 
+	 * @return    string    the scripts's complete text
 	 */
-	function createFeed() 
+	function createFeed()
 	{
 		$feed = parent::createFeed();
 		$feedArray = explode("\n",$feed);
-		
+
 		$jsFeed = "";
 		foreach ($feedArray as $value) {
 			$jsFeed .= "document.write('".trim(addslashes($value))."');\n";
 		}
 		return $jsFeed;
 	}
-    
+
 	/**
 	 * Overrrides parent to produce .js extensions
 	 *
@@ -1714,62 +1683,62 @@
 		$fileInfo = pathinfo($_SERVER["PHP_SELF"]);
 		return substr($fileInfo["basename"],0,-(strlen($fileInfo["extension"])+1)).".js";
 	}
-	
-}	
 
+}
 
 
+
 /*** TEST SCRIPT *********************************************************
 
-//include("feedcreator.class.php"); 
+//include("feedcreator.class.php");
 
-$rss = new UniversalFeedCreator(); 
-$rss->useCached(); 
-$rss->title = "PHP news"; 
-$rss->description = "daily news from the PHP scripting world"; 
+$rss = new UniversalFeedCreator();
+$rss->useCached();
+$rss->title = "PHP news";
+$rss->description = "daily news from the PHP scripting world";
 
 //optional
 //$rss->descriptionTruncSize = 500;
 //$rss->descriptionHtmlSyndicated = true;
 //$rss->xslStyleSheet = "http://feedster.com/rss20.xsl";
 
-$rss->link = "http://www.dailyphp.net/news"; 
-$rss->feedURL = "http://www.dailyphp.net/".$PHP_SELF; 
+$rss->link = "http://www.dailyphp.net/news";
+$rss->feedURL = "http://www.dailyphp.net/".$PHP_SELF;
 
-$image = new FeedImage(); 
-$image->title = "dailyphp.net logo"; 
-$image->url = "http://www.dailyphp.net/images/logo.gif"; 
-$image->link = "http://www.dailyphp.net"; 
-$image->description = "Feed provided by dailyphp.net. Click to visit."; 
+$image = new FeedImage();
+$image->title = "dailyphp.net logo";
+$image->url = "http://www.dailyphp.net/images/logo.gif";
+$image->link = "http://www.dailyphp.net";
+$image->description = "Feed provided by dailyphp.net. Click to visit.";
 
 //optional
 $image->descriptionTruncSize = 500;
 $image->descriptionHtmlSyndicated = true;
 
-$rss->image = $image; 
+$rss->image = $image;
 
-// get your news items from somewhere, e.g. your database: 
-//mysql_select_db($dbHost, $dbUser, $dbPass); 
-//$res = mysql_query("SELECT * FROM news ORDER BY newsdate DESC"); 
-//while ($data = mysql_fetch_object($res)) { 
-	$item = new FeedItem(); 
-	$item->title = "This is an the test title of an item"; 
-	$item->link = "http://localhost/item/"; 
-	$item->description = "<b>description in </b><br/>HTML"; 
-	
+// get your news items from somewhere, e.g. your database:
+//mysql_select_db($dbHost, $dbUser, $dbPass);
+//$res = mysql_query("SELECT * FROM news ORDER BY newsdate DESC");
+//while ($data = mysql_fetch_object($res)) {
+	$item = new FeedItem();
+	$item->title = "This is an the test title of an item";
+	$item->link = "http://localhost/item/";
+	$item->description = "<b>description in </b><br/>HTML";
+
 	//optional
 	//item->descriptionTruncSize = 500;
 	$item->descriptionHtmlSyndicated = true;
-	
-	$item->date = time(); 
-	$item->source = "http://www.dailyphp.net"; 
-	$item->author = "John Doe"; 
-	 
-	$rss->addItem($item); 
-//} 
 
+	$item->date = time();
+	$item->source = "http://www.dailyphp.net";
+	$item->author = "John Doe";
+
+	$rss->addItem($item);
+//}
+
 // valid format strings are: RSS0.91, RSS1.0, RSS2.0, PIE0.1, MBOX, OPML, ATOM0.3, HTML, JS
-echo $rss->saveFeed("RSS0.91", "feed.xml"); 
+echo $rss->saveFeed("RSS0.91", "feed.xml");
 
 
 
